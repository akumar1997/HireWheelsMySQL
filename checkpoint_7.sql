----------
-- PART A--
----------
/**
TODO 1: Create a table named ‘bill’ to store the data of the final bill received by 
the customer.
**/
create table bill(
  booking_id integer(10) primary key auto_increment,
  vehicle_id numeric(10),
  user_id numeric(10),
  bill_date date not null,
  discount decimal(10,2) default 0,
  tax_amount decimal(10,2) not null,
  total_amount decimal(10,2) not null,
  message varchar(50) not null
  );
  
 
  
 alter table bill
 add foreign key(vehicle_id) references vehicle(vehicle_id),
 add foreign key(user_id) references user(user_id);
 

/**
TODO 2: Write a procedure named ‘add_bill_data’ to populate the ‘bill’ table with 
data as follows:

The procedure should accept booking_id as an input.
In case the user is an ‘Admin’, the bill should be marked as ‘Invalid Bill’.
**/
drop procedure if exists add_bill_data;

delimiter $$
create procedure add_bill_data(bookingId numeric(10))
begin
        declare vehicleId numeric(10);
        declare userId numeric(10);
        declare discount decimal(10, 2);
        declare taxAmount decimal(10, 2);
declare totalAmount decimal(10, 2);
        declare message varchar(50);
        declare bookingCheck boolean;
        declare userRole varchar(50);
        declare userCounter integer;
        declare bookingAmount decimal(10, 2);
       
        set vehicleId = null;
        set userId = null;
        set discount = 0;
        set taxAmount = 0;
        set totalAmount = 0;
        set message = '';
        set userCounter = 0;
        set bookingCheck = false;
        set userRole = '';
        set bookingAmount = 0;
       
        if (select count(booking_id) from booking where booking_id = bookingId) then
set bookingCheck = true;
end if;
       
        if bookingCheck then
       
select count(user_id) into userCounter from booking where user_id = (select user_id from booking where booking.booking_id = bookingId);

select vehicle_id, user_id, booking_amount into vehicle_id, user, booking_amount from booking where booking_id = bookingId;

select user_role into userRole from user inner join _role on user.user_role_id = user_role.user_role_id where user.user_id = userId;

set taxAmount = (10/100) * bookingAmount;

if userCounter > 10 then
set discount = (20/100) * bookingAmount;
set totalAmount = bookingAmount - discount + taxAmount;
else
set totalAmount = bookingAmount + taxAmount;
end if;
       
            if userRole = 'ADMIN' then
set message = 'Invalid Bill';
            else
set message = 'Valid Bill';
end if;
           
else
set message = 'Invalid Bill';
end if;
       
        insert into bill(vehicle_id, user_id, bill_date, discount, tax_amount, total_amount, message) 
        values( vehicleId, userId, curdate(), discount, taxAmount, totalAmount, message);
       
end $$
delimiter ;



/**
TODO 3: Use add_bill_data stored procedure to add the bill data for some booking id,
and check the data in the bill table.
**/
call add_bill_data(1001);

select * from bill;

----------
-- PART B--
----------
/**
TODO 1: Write a stored procedure named ‘revenue_report’ that generates a revenue 
report for your boss, showcasing the revenue generated by vehicles to date based on their 
city. The report should be arranged in descending order of the revenue and would look 
something like this:

‘{CITY_NAME} : {REVENUE}’
At the end line of the report, also print: ‘Total Revenue: {TOTAL_REVENUE}’. 
The report should include all the cities available in the database, and if 
they have not generated any revenue, show the revenue as 0.
**/
drop procedure if exists revenue_report;

 DELIMITER //
 CREATE PROCEDURE revenue_report()
 BEGIN
 select city_name as 'CITY_NAME', sum(booking_amount) as 'REVENUE'
 from booking inner join location on booking.location_id=location.location_id
 inner join city on location.city_id=city.city_id
 group by city_name 
 order by 2 desc;
 
 select sum(booking_amount) as 'Total Revenue' from booking ;
END //
DELIMITER ;
 
 call revenue_report(); 

----------
-- PART C--
----------
/**
TODO 1: Sometimes, customers might return their car later than the expected return 
date. In order to include this in the database, add the following column to the booking 
table:
     1. Actual drop-off date: This represents the actual date on which the customer 
returned the vehicle. It should store the DATE of the actual drop off. The default value 
for this should be NULL, and once the user returns the vehicle, it should be updated with
the return date. 
**/
 
 alter  table booking
 add actual_dropoff_date date default null;
/**
TODO 2: Write a trigger ‘generate_bill_trigger’ that is invoked when an update statement 
is called on the booking table to update the actual drop-off date. This trigger should
generate a bill, i.e., it should insert data into the bill table based on the updated
return date.
**/
DROP TRIGGER IF EXISTS generate_bill_trigger;

DELIMITER $$
 
CREATE TRIGGER generate_bill_trigger
 AFTER UPDATE
ON booking FOR EACH ROW
BEGIN
 call add_bill_data(old.booking_id);
END $$
 
DELIMITER ;

/**
TODO 3: Update an entry in the booking table for any booking id with the actual drop-off
date as 21-06-20.

**/
update booking
set actual_dropoff_date ='2020-06-21' 
where booking_id=1;



/**
TODO 4: Show the bill table to ensure that the bill was generated for the booking ID used in
TODO 3.
**/
select * from bill;

